'''
Instructions from your teacher:
 
Students will modify their password program in the following ways:
1. Replace the list of old passwords with a file of old passwords (will need to write them to a password table in a database called users).
2. Read the table when a user attempts to create a password.  Confirm that their new password has never been used.
3. Upon successfully creating a new password, append the password table.
'''

import colorama
from colorama import Fore
import sqlite3
import hashlib #This will help us encrypt our password
import re
import string
invalidChars = set


db  = sqlite3.connect( "users.db" )
cur = db.cursor()
cur.execute( "CREATE TABLE IF NOT EXISTS passwords( pwd TEXT, UNIQUE( pwd ))" )

print(Fore.WHITE + "==================================================================\n")
print(Fore.YELLOW+"Password")
print(Fore.RED+"Your password Must contain:\n1. At least 2 digits and 6 alpha characters\n2. Has lower case and upper case letters.\n3. Has numbers and letters.\n4. Has 1 Special characters\n5. Must not match any used passwords")

#This will help us check if there are any numbers in our password
def hasNumbers(password):
  return any(char.isdigit() for char in password)
  
#This will help us check if there are any characters in our password
def hasChar(password):
  return any(char.isalpha() for char in password)


def passsword():
  print(" ")

  
  print(Fore.CYAN+"Password:")
  
  first_pwd = input(Fore.WHITE+"")

  print(Fore.CYAN+"Enter password again:")

  recheck_first = input(Fore.WHITE + " ")
  
  lstSpecial= ("[@_!#$%^&*()<>?/\|}{~:]")

  numbers = ['0','1','2','3','4','5','6','7','8','9']

  invalidChars = set(string.punctuation.replace("_", ""))

  lstUsedPasswords=["abcdeF!23","zxcbhK#44","poiuyT&11"]

  regex = re.compile(lstSpecial)

  d=0

  l=0
  for c in recheck_first:
    if c.isdigit():
      d=d+1
    elif c.isalpha():
      l=l+1
    else:
        pass
  #the for loop above checks for every character in the password.  If there 
  #are any digits, then add them into an array and count how many there are later
  if hasChar(first_pwd and recheck_first) == False:
          print(Fore.RED + "You need letters!")
          passsword()
    
  elif l < 6:
          print(Fore.RED + "You need at least 6 letters!")
          passsword()

  elif first_pwd.isupper() and recheck_first.isupper() or first_pwd.islower() and recheck_first.islower():
          print(Fore.RED + "You need upper and lower case letters. ")
          passsword()

  elif hasNumbers(first_pwd and recheck_first) == False:
          print(Fore.RED + "You need digits")
          passsword()

  elif d < 2:
      print(Fore.RED + "You need more than two digits!")
      passsword()

  elif (regex.search(first_pwd) == None):
      print("You need special characters!")
      passsword()

  elif any(passs.lower() == first_pwd.lower() for passs in lstUsedPasswords): 
      print("You can't reuse a password!")
      passsword()
  
  #else if both passwords are equal, then encrypt the password using hash functions
  elif first_pwd == recheck_first:
    print("")
    sha = hashlib.sha256( first_pwd.encode( 'utf-8' )).hexdigest()#Encrypts the password
    cur.execute( "INSERT INTO passwords VALUES( ? )", ( sha, ))


#While true, 
while True:
  try:#If the password isn't being re=used then make the user type out the password again.
    passsword()
    #break
  except KeyboardInterrupt: #Close the database cleanly.
    print( "aborted" )
    break
  except sqlite3.IntegrityError:#except if sqlite3 detects the password in the database then tell the user that they can not reuse that password.
    print( "cannot reuse that password\n" )
    db.commit()


db.close()
