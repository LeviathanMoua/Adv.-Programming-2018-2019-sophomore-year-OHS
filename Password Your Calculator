#Title Name: Log in and Sign Up simulation
'''
Create a tkinter form to password your calculator.
Maintain a list, dictionary, text file, or database for the names.

1.  Create a new user sign in.
     a.  Must enter password twice for confirmation
2.  Create a 'forgot password routine' that will email them their password.

Once the person is successfully logged in, unload the login and show the calculator.
'''

import tkinter as tki
from tkinter import *
import sqlite3
import tkinter

conn = sqlite3.connect('dbPasswordCalculatorRoughDraft3.db')
c=conn.cursor()
c.execute("CREATE TABLE IF NOT EXISTS tblCalculatorPasswordInfo(eMail TEXT,userName CHAR(30), password TEXT)")
c2 = conn.cursor()
cGrabAll = conn.cursor()
cGrabAll2 = conn.cursor()

def fnCalculator():
    expression = ""

    def keypress(num):
            global expression
            expression = expression + str(num) 
            equation.set(expression)
            
    def equalpress():
            global expression
            answer = str(eval(expression))
            equation.set(answer)
            expression = ""
            
    def clear(): 
            global expression 
            expression = "" 
            equation.set("")
            
    def close_window (): 
        CalculatorWindow.destroy()
            
    CalculatorWindow = Tk()
    CalculatorWindow.configure(background="light blue")
    CalculatorWindow.title("Calculator")
    CalculatorWindow.geometry("285x150")

    equation = StringVar()
    expression_field = Entry(CalculatorWindow, textvariable=equation)
    expression_field.grid(columnspan=5, ipadx=91) 
    equation.set('Click the numbers!')
    columnInstance = 0
    intNum = 1
    columnPlacing = 0

    for x in range(10):
            strTextNum = str(intNum)
            button= Button(CalculatorWindow, text = strTextNum, fg='yellow', bg = 'black',
                    command=lambda x=intNum:keypress(x), height = 1, width = 7)
            if columnInstance <= 3:
                    rowPlacing = 2
                    button.grid(row = rowPlacing, column = columnPlacing)
                    columnInstance += 1
                    columnPlacing += 1
                    intNum +=1
                    if columnInstance == 4:
                            button.grid(row = 3, column = 0)
                            columnPlacing = 1
            elif columnInstance <= 6:
                    rowPlacing = 3
                    button.grid(row = rowPlacing, column = columnPlacing)
                    columnInstance += 1
                    columnPlacing += 1
                    intNum +=1
                    if columnInstance == 7:
                            button.grid(row = 4, column = 0)
                            columnPlacing = 1
            elif columnInstance <= 8:
                    rowPlacing = 4
                    button.grid(row = rowPlacing, column = columnPlacing)
                    columnInstance += 1
                    columnPlacing += 1
                    intNum +=1
                    
    button0 = Button(CalculatorWindow, text=' 0 ', fg='yellow',
                     bg='black',command=lambda: keypress(0), height=1, width=7) 
    button0.grid(row=5, column=1) 
    plus = Button(CalculatorWindow, text=' + ', fg='yellow',
                  bg='black',command=lambda: keypress("+"), height=1, width=7) 
    plus.grid(row=2, column=3) 
    minus = Button(CalculatorWindow, text=' - ', fg='yellow',
                   bg='black',command=lambda: keypress("-"), height=1, width=7) 
    minus.grid(row=3, column=3) 
    multiply = Button(CalculatorWindow, text=' * ', fg='yellow',
                      bg='black',command=lambda: keypress("*"), height=1, width=7) 
    multiply.grid(row=4, column=3) 
    divide = Button(CalculatorWindow, text=' / ', fg='yellow',
                    bg='black',command=lambda: keypress("/"), height=1, width=7) 
    divide.grid(row=5, column=3) 
    equal = Button(CalculatorWindow, text=' = ', fg='yellow',
                   bg='black',command=equalpress, height=1, width=7) 
    equal.grid(row=5, column=2) 
    clear = Button(CalculatorWindow, text='Clear', fg='yellow',
                   bg='black',command=clear, height=1, width=7) 
    clear.grid(row=5, column='0')
    btnExit = tkinter.Button(CalculatorWindow, text = "Exit here",fg = 'yellow',
                             bg = 'black', command = close_window, height = 1, width = 7)
    btnExit.grid(column=1,row=7)

    CalculatorWindow.mainloop() 

def fnMainWindow():
    global mainWindow
    mainWindow = tkinter.Tk()
    mainWindow.title('Phone Book')
    mainWindow.geometry('750x400')
    mainWindow.configure(background='black')
    toolbar=Frame(mainWindow,bg='yellow')
    toolbar.pack(side=TOP,fill=X)
    mainWindowDestroy = True

    def fnDestroyMainWindowLabels():
        lblYouNeedToFillInBothEntries.place_forget()
        lblEmailSent.place_forget()
        lblUserNameAndOrPasswordNotRecognized.place_forget()
    lblForMainWindow=tki.Label(mainWindow,text="Calculator Password",fg='white',bg='black',font=('Times New Roman',30))
    lblForMainWindow.place(x=215,y=20)    
    #Log in labels
    lblLogInWithUserName=tki.Label(mainWindow,text="User name:",fg='white',bg='black',font=('Times New Roman',16))
    lblLogInWithUserName.place(x=160,y=160)
    lblLogInWithPassword=tki.Label(mainWindow,text="Password:",fg='white',bg='black',font=('Times New Roman',16))
    lblLogInWithPassword.place(x=160,y=200)
    #Error labels
    lblYouNeedToFillInBothEntries=tki.Label(mainWindow,text="You need to fill in both entries!",fg='white',bg='black',font=('Times New Roman',16))
    lblEmailSent=tki.Label(mainWindow,text="Email Sent!",fg='white',bg='black',font=('Times New Roman',16))
    lblUserNameAndOrPasswordNotRecognized=tki.Label(mainWindow,text="Username or Password not recognized",fg='white',bg='black',font=('Times New Roman',16))

    #Log in entries  
    entryLogInWithUserName=tki.Entry(mainWindow,fg='black',width=30,bg='white',font=('Times New Roman',16),justify='left')
    entryLogInWithUserName.place(x=260,y=160)
    entryLogInWithPassword=tki.Entry(mainWindow,fg='black',width=30,bg='white',font=('Times New Roman',16),justify='left',show="*")
    entryLogInWithPassword.place(x=260,y=200)

    #Buttons for the main window
    btnLogin=tki.Button(mainWindow,text='Log in', height = 4, width = 15, command = lambda:fnLogin())
    btnLogin.place(x=200,y=300)
    btnForgotPass=tki.Button(mainWindow,text='Forgot password', height = 4, width = 15, command = lambda:fnEmailSent())
    btnForgotPass.place(x=320,y=300)
    btnSignUp=tki.Button(mainWindow,text='Sign up', height = 4, width = 15, command = lambda:fnDestroyMainWindowThenReplaceWithSignIn())
    btnSignUp.place(x=440,y=300)


    def fnLogin():
        strEntryLogInWithUserName = entryLogInWithUserName.get()
        strEntryLogInWithPassword = entryLogInWithPassword.get()
        
        find_user = ("SELECT * FROM tblCalculatorPasswordInfo WHERE userName = ? AND password =?")
        c.execute(find_user,[(strEntryLogInWithUserName),(strEntryLogInWithPassword)])
        results = c.fetchall()
        

        if results:
            fnCalculator()
            '''
            for x in results:
                print("Welcome " + x[1])
            return("exit")
            '''
        #if the user doesn't input anything, tell them that they need to fill in both entries
        elif len(strEntryLogInWithUserName) == 0 or len(strEntryLogInWithPassword) == 0:
            fnDestroyMainWindowLabels()
            lblYouNeedToFillInBothEntries.place(x=250,y=250)

        else:
            fnDestroyMainWindowLabels()
            lblUserNameAndOrPasswordNotRecognized.place(x=250,y=250)
        
        conn.commit()
    def fnEmailSent():
        fnDestroyMainWindowLabels()
        lblEmailSent.place(x=250,y=250)

fnMainWindow()

#This allows us to destroy the main window when clicking the sign up button
def fnDestroyMainWindowThenReplaceWithSignIn():
    global mainWindow
    mainWindow.destroy()
    fnSignIn()

#This is used for when the user wants to retype their password.  A new window pops up
#due to the difficulties of local variables of the buttons being deleted.
def fnDestroySignInWindowThenReplace():
    signInWindow.destroy()
    fnSignIn()
#This allows us to clear the entries for the password if the user hasn't met the requirements such as
#having at least 8 characters.

def fnLogIn():
    logInWindow = Tk()
    logInWindow = Tk()
    logInWindow.title('LogIn')
    logInWindow.geometry('750x400')
    logInWindow.configure(background='black')
    
#Sign in function
def fnSignIn():
    global signInWindow
    def fnClearingPasswordEntry():
        entryPassword.delete(0, END)
        entryPasswordAgain.delete(0, END)
    def fnDestroyLogInLabels():
        lblNeedMoreThan8Char.place_forget()
        lblNeedLetters.place_forget()
        lblNeedNumbers.place_forget()
        lblNeedUpperAndLowerCase.place_forget()
        lblPasswordsDoNotMatch.place_forget()
        lblUserAndPassAlrdyExist.place_forget()
    
    #==========SECOND WINDOW=================
    signInWindow = Tk()
    signInWindow.title('Phone Book')
    signInWindow.geometry('750x400')
    signInWindow.configure(background='black')
    #==========SECOND WINDOW=================
    mainWindowDestroy = False
    
    #=========ENTRIES======ENTRIES=======ENTRIES===========ENTRIES============ENTRIES    
    #Entry Boxes
    entryEmail=tki.Entry(signInWindow,fg='black',width=30,bg='white',font=('Times New Roman',16),justify='left')
    entryUserName=tki.Entry(signInWindow,fg='black',width=30,bg='white',font=('Times New Roman',16),justify='left')
    entryPassword=tki.Entry(signInWindow,fg='black',width=30,bg='white',font=('Times New Roman',16),justify='left',show="*")
    entryPasswordAgain=tki.Entry(signInWindow,fg='black',width=30,bg='white',font=('Times New Roman',16),justify='left',show="*")


    #def entries():
    #Place the entries
    entryEmail.place(x=160,y=80)
    entryUserName.place(x=160,y=120)
    entryPassword.place(x=160,y=160)
    entryPasswordAgain.place(x=160,y=200)
    #=========ENTRIES======ENTRIES=======ENTRIES===========ENTRIES============ENTRIES    


    #========LABELS==============LABELS=================LABELS================================
    #password requirement label
        #Password requirement label
    lblPswdRequirements=tki.Label(text="Must AT LEAST have:\n1) 8 characters\n2) An uppercase character\n4) A lowercase character\n5) Digits",fg='white',bg='black',font=('Times New Roman',16))
    lblPswdRequirements.place(x=500,y=10)
    #Title label
    lblProgramTitle=tki.Label(signInWindow,text="Sign Up",fg='white',bg='black',font=('Times New Roman',30))
    lblProgramTitle.place(x=320,y=10)   
    #My Name label
    lblMyName=tki.Label(text="Justin Moua\nJackson\nAdv. Programming\n4th Hr.",fg='white',bg='black',font=('Times New Roman',10))
    lblMyName.place(x=150,y=10)
    #Email Label
    eMailLabel=tki.Label(text="e-Mail",fg='white',bg='black',font=('Times New Roman',16))
    eMailLabel.place(x=20,y=80)
    #Username Label
    UserNameLabel=tki.Label(text="User Name",fg='white',bg='black',font=('Times New Roman',16))
    UserNameLabel.place(x=20,y=120)
    #password label
    PasswordLabel=tki.Label(text="Password",fg='white',bg='black',font=('Times New Roman',16))
    PasswordLabel.place(x=20,y=160)  
    #retype password label
    PasswordAgainLabel=tki.Label(text="Password Again",fg='white',bg='black',font=('Times New Roman',16))
    PasswordAgainLabel.place(x=20,y=200)

    #Need more than 8 characters label
    lblNeedMoreThan8Char=tki.Label(text="You need at least more than eight characters!",fg='white',bg='black',font=('Times New Roman',16))

    #Need more letters label
    lblNeedLetters=tki.Label(text="You need letters!",fg='white',bg='black',font=('Times New Roman',16))

    #Need digits label
    lblNeedNumbers=tki.Label(text="You need digits.",fg='white',bg='black',font=('Times New Roman',16))

    #Need upper and lowercase letters
    lblNeedUpperAndLowerCase=tki.Label(text="You need upper and lowercase letters.",fg='white',bg='black',font=('Times New Roman',16))

    #Password does not match label
    lblPasswordsDoNotMatch=tki.Label(text="Passwords do not match!",fg='white',bg='black',font=('Times New Roman',16))

    #Password and user already exists label
    lblUserAndPassAlrdyExist=tki.Label(text="User and Password already exists!",fg='white',bg='black',font=('Times New Roman',16))
    #========LABELS==============LABELS=================LABELS==================================

    #=================CONFIRMATION BUTTON=======================================================
    #This button confirms that you will be singing up
    btnConfirm=tki.Button(signInWindow,text='Confirm', height = 4, width = 15, command = lambda:fnCheckPassword())
    btnConfirm.place(x=20,y=10)
    #=================CONFIRMATION BUTTON=======================================================

    
    #====================PASSWORD CHECKER BELOW===============================================
    acceptpass = False
    acceptpass = True

    #BOTH OF THESE ALLOWS US TO CHECK IF THE PASSWORD HAS NUMBERS OR CHARACTERS
    def fnHasNumbers(password):
        return any(char.isdigit() for char in password)
    def fnHasChar(password):
        return any(char.isalpha() for char in password)

    
    def fnCheckPassword():
        username = entryUserName.get()
        first = entryPassword.get()
        recheck_first = entryPasswordAgain.get()
        
        check_if_already_in_table = ("SELECT * FROM tblCalculatorPasswordInfo WHERE userName = ? AND password =?")
        c.execute(check_if_already_in_table,[(username),(first)])
        results = c.fetchall()
        

        if results:
            entryUserName.delete(0, END)
            fnDestroyLogInLabels()
            lblUserAndPassAlrdyExist.place(x=200,y=240)
            fnClearingPasswordEntry()


        #=============CHECKS IF YOU HAVE MORE THAN 8 CHARACTERS========
        elif len(first) and len(recheck_first) < 8:
            fnDestroyLogInLabels()
            lblNeedMoreThan8Char.place(x=200,y=240)
            fnClearingPasswordEntry()

        #============CHECKS IF PASSWORD HAS LETTERS=========
        elif fnHasChar(first and recheck_first) == False:
            fnDestroyLogInLabels()
            lblNeedLetters.place(x=200,y=240)
            fnClearingPasswordEntry()
            
        #======================CHECKS IF PASSWORD HAS ANY UPPERCASE OR LOWERCASE LETTERS
        elif first.isupper() and recheck_first.isupper() or first.islower() and recheck_first.islower():
            fnDestroyLogInLabels()
            lblNeedUpperAndLowerCase.place(x=200,y=240)
            fnClearingPasswordEntry()
            
        #============CHECKS IF PASSWORD HAS ANY NUMBERS====================
        elif fnHasNumbers(first and recheck_first) == False:
            fnDestroyLogInLabels()
            lblNeedNumbers.place(x=200,y=240)
            fnClearingPasswordEntry()    
            
        elif first == recheck_first:
            fnDestroyLogInLabels()
            if acceptpass == True:
                #=============WEAK=============================
                if len(first and recheck_first) <= 10:
                    lblWeakStrengthButPswdMatchesAlsoAskIfWantToRetype=tki.Label(text="Weak Strength although the Passwords Matches!\nDo you want to retype your password since it is weak?",fg='white',bg='black',font=('Times New Roman',16))
                    lblWeakStrengthButPswdMatchesAlsoAskIfWantToRetype.place(x=60,y=240)
                    
                    #==========YES BUTTON==========
                    btnYes=tki.Button(signInWindow,text='yes', height = 4, width = 15, command = lambda:fnDestroySignInWindowThenReplace())
                    btnYes.place(x=140,y=320)
                    #==========YES BUTTON==========
                    
                    #==========NO BUTTON===========
                    btnNo=tki.Button(signInWindow,text='no', height = 4, width = 15, command = lambda:fnDestroySignInWindowThenReplaceWithMainWindow())
                    btnNo.place(x=320,y=320)
                    #==========NO BUTTON===========
                    
                #=================MEDUIM======================            
                #if the length of the password is greater than ten and less than 14
                #then it is a meduim password.
                elif len(first and recheck_first) > 10 and len(first and recheck_first) < 14:
                    lblMeduimStrengthButPswdMatchesAlsoAskIfWantToRetype=tki.Label(text="Meduim Strength although the Passwords Matches!\nDo you want to retype your password since it is meduim?",fg='white',bg='black',font=('Times New Roman',16))
                    lblMeduimStrengthButPswdMatchesAlsoAskIfWantToRetype.place(x=60,y=240)
                    #==========YES BUTTON==========
                    btnYes=tki.Button(signInWindow,text='yes', height = 4, width = 15, command = lambda:fnDestroySignInWindowThenReplace())
                    btnYes.place(x=140,y=320)
                    #==========YES BUTTON==========
                    
                    #==========NO BUTTON===========
                    btnNo=tki.Button(signInWindow,text='no', height = 4, width = 15, command = lambda:fnDestroySignInWindowThenReplaceWithMainWindow())
                    btnNo.place(x=320,y=320)
                    #==========NO BUTTON===========
                
                elif len(first and recheck_first) >= 14:
                    lblStrongPasswordAndMatches=tki.Label(text="Strong Password, Password matches!",fg='white',bg='black',font=('Times New Roman',16))
                    lblStrongPasswordAndMatches.place(x=60,y=240) 
#==============================================================================
#===========OPEN UP THE MAIN WINDOW AFTER CLICKING NO ON THIS==================
#==============================================================================
                    btnGoBackToHomePg=tki.Button(signInWindow,text='Go back to homepage', height = 4, width = 20, command = lambda:fnDestroySignInWindowThenReplaceWithMainWindow())
                    btnGoBackToHomePg.place(x=140,y=320)
#==============================================================================
#===========OPEN UP THE MAIN WINDOW AFTER CLICKING NO ON THIS==================
#==============================================================================
                    
        else:
            fnDestroyLogInLabels()
            lblPasswordsDoNotMatch.place(x=200,y=240)




#Allows us to destroy the Sign in Window then replace it with the main window.
#This is used for the user has successfully made their password.
    def fnDestroySignInWindowThenReplaceWithMainWindow():
        getEmailFromEntry = entryEmail.get()
        getUserNameFromEntry = entryUserName.get()
        getPasswordFromEntry = entryPassword.get()

        #c.execute("CREATE TABLE IF NOT EXISTS tblCalculatorPasswordInfo(eMail TEXT,userName CHAR(30), password TEXT)")

        c.execute("INSERT INTO tblCalculatorPasswordInfo(eMail,userName,password) VALUES(:eMail,:userName,:password)",
                  {"eMail":getEmailFromEntry,"userName":getUserNameFromEntry,"password":getPasswordFromEntry})
        
        conn.commit()
        signInWindow.destroy()
        fnMainWindow()
        
    signInWindow.mainloop()
